---
- name: Stop running containers by scaling replicas down to 0
  openshift_v1_deployment_config:
      name: foreman
      namespace: "{{ project_name }}"
      replicas: 0
  tags:
    - stop
    - restart
- name: Stop running containers by scaling replicas down to 0
  openshift_v1_deployment_config:
      name: dynflow
      namespace: "{{ project_name }}"
      replicas: 0
  tags:
    - stop
    - restart
- name: Stop running containers by scaling replicas down to 0
  openshift_v1_deployment_config:
      name: memcached
      namespace: "{{ project_name }}"
      replicas: 0
  tags:
    - stop
    - restart
- name: Stop running containers by scaling replicas down to 0
  openshift_v1_deployment_config:
      name: httpd
      namespace: "{{ project_name }}"
      replicas: 0
  tags:
    - stop
    - restart

- name: Create deployment, and scale replicas up
  openshift_v1_deployment_config:
      state: "{{ deployment_state }}"
      force: false
      resource_definition:
          apiVersion: v1
          kind: deployment_config
          metadata:
              name: foreman
              namespace: "{{ project_name }}"
              labels:
                  app: foreman
                  service: foreman
          spec:
              template:
                  metadata:
                      labels:
                          app: foreman
                          service: foreman
                  spec:
                      containers:
                        - name: foreman
                          securityContext: {}
                          state: present
                          volumeMounts:
                            - readOnly: true
                              mountPath: /etc/pki/katello/private
                              name: keys
                            - readOnly: true
                              mountPath: /etc/pki/katello/certs
                              name: certs
                          env:
                            - name: POSTGRES_DB
                              value: foreman
                            - name: POSTGRES_USER
                              value: foreman
                            - name: POSTGRES_PASSWORD
                              value: foreman
                            - name: SEED_ADMIN_USER
                              value: admin
                            - name: SEED_ADMIN_PASSWORD
                              value: changeme
                            - name: RAILS_ENV
                              value: production
                          args:
                            - /usr/bin/start-foreman.sh
                          command:
                            - /usr/bin/entrypoint.sh
                          ports:
                            - protocol: TCP
                              containerPort: 8080
                          image: "{{ registry }}/foreman-foreman:{{ 'providers' if foreman_providers else 'latest' }}"
                      serviceAccount: anyuid
                      serviceAccountName: anyuid
                      volumes:
                        - secret:
                              items:
                                - path: ca.key
                                  key: ca.key
                                - path: pulp-client.key
                                  key: pulp-client.key
                              secretName: keys
                          name: keys
                        - secret:
                              items:
                                - path: ca.crt
                                  key: ca.crt
                                - path: pulp-client.crt
                                  key: pulp-client.crt
                              secretName: certs
                          name: certs
              replicas: 1
              strategy:
                  type: Rolling
  tags:
    - start
    - restart
    - destroy
- name: Create deployment, and scale replicas up
  openshift_v1_deployment_config:
      state: "{{ deployment_state }}"
      force: false
      resource_definition:
          apiVersion: v1
          kind: deployment_config
          metadata:
              name: dynflow
              namespace: "{{ project_name }}"
              labels:
                  app: foreman
                  service: dynflow
          spec:
              template:
                  metadata:
                      labels:
                          app: foreman
                          service: dynflow
                  spec:
                      containers:
                        - name: dynflow
                          securityContext: {}
                          state: present
                          volumeMounts:
                            - readOnly: true
                              mountPath: /etc/pki/katello/private
                              name: keys
                            - readOnly: true
                              mountPath: /etc/pki/katello/certs
                              name: certs
                          env:
                            - name: POSTGRES_DB
                              value: foreman
                            - name: POSTGRES_USER
                              value: foreman
                            - name: POSTGRES_PASSWORD
                              value: foreman
                            - name: RAILS_ENV
                              value: production
                          args:
                            - /usr/bin/start-dynflowd.sh
                          command:
                            - /usr/bin/entrypoint.sh
                          image: "{{ registry }}/foreman-dynflow:latest"
                      serviceAccount: anyuid
                      serviceAccountName: anyuid
                      volumes:
                        - secret:
                              items:
                                - path: ca.key
                                  key: ca.key
                                - path: pulp-client.key
                                  key: pulp-client.key
                              secretName: keys
                          name: keys
                        - secret:
                              items:
                                - path: ca.crt
                                  key: ca.crt
                                - path: pulp-client.crt
                                  key: pulp-client.crt
                              secretName: certs
                          name: certs
              replicas: 1
              strategy:
                  type: Rolling
  tags:
    - start
    - restart
    - destroy
- name: Create deployment, and scale replicas up
  openshift_v1_deployment_config:
      state: "{{ deployment_state }}"
      force: false
      resource_definition:
          apiVersion: v1
          kind: deployment_config
          metadata:
              name: memcached
              namespace: "{{ project_name }}"
              labels:
                  app: foreman
                  service: memcached
          spec:
              template:
                  metadata:
                      labels:
                          app: foreman
                          service: memcached
                  spec:
                      containers:
                        - name: memcached
                          securityContext: {}
                          state: present
                          image: manageiq/memcached
              replicas: 1
              strategy:
                  type: Rolling
  tags:
    - start
    - restart
    - destroy

- name: Create deployment, and scale replicas up
  openshift_v1_deployment_config:
      state: "{{ deployment_state }}"
      force: false
      resource_definition:
          apiVersion: v1
          kind: deployment_config
          metadata:
              name: httpd
              namespace: "{{ project_name }}"
              labels:
                  app: foreman
                  service: httpd
          spec:
            selector:
                name: httpd
            strategy:
                type: Recreate
                recreateParams:
                    timeoutSeconds: 1200
            triggers:
                - type: ConfigChange
            replicas: 1
            template:
                metadata:
                    name: "httpd"
                    labels:
                        name: "httpd"
                spec:
                    serviceAccount: anyuid
                    serviceAccountName: anyuid
                    volumes:
                      - name: httpd-config
                        configMap:
                            name: "httpd-configs"
                      - name: certs
                        secret:
                            secretName: certs
                            items:
                              - path: katello-default-ca.crt
                                key: ca.crt
                              - path: katello-server.crt
                                key: pulp.crt
                      - name: keys
                        secret:
                            secretName: keys
                            items:
                              - path: katello-default-ca.key
                                key: ca.key
                              - path: katello-server.key
                                key: pulp.key
                    containers:
                      - name: httpd
                        image: "{{ registry }}/foreman-httpd:latest"
                        command:
                          - /usr/sbin/init
                        ports:
                          - containerPort: 80
                            protocol: TCP
                          - containerPort: 443
                            protocol: TCP
                        volumeMounts:
                          - name: httpd-config
                            mountPath: "/etc/httpd/conf.d"
                          - readOnly: true
                            mountPath: /etc/pki/katello/private
                            name: keys
                          - readOnly: true
                            mountPath: /etc/pki/katello/certs
                            name: certs
                        lifecycle:
                            postStart:
                                _exec:
                                    command:
                                      - "/usr/bin/save-container-environment"
  tags:
    - start
    - restart
    - destroy
